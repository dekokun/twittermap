AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Resources:
  TweetGetLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: tweetget # file name
      Runtime: go1.x
      CodeUri: lambda/build
      Timeout: 300
      AutoPublishAlias: latest
      Events:
        ScheduleEvent:
          Type: Schedule
          Properties:
            Schedule: rate(1 minute)
  S3UploadLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: s3upload # file name
      Runtime: go1.x
      CodeUri: lambda/build
      Timeout: 300
      AutoPublishAlias: latest
      Policies:
        - S3CrudPolicy:
            BucketName: twittermap.dekokun.info
  TwitterS3UploadStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString:
        !Sub
        - |-
          {
            "StartAt": "HelloWorld",
            "States": {
              "HelloWorld": {
                "Type": "Task",
                "Resource": "${S3UploadLambdaArn}",
                "End": true
              }
            }
          }
        - {S3UploadLambdaArn: !GetAtt [ S3UploadLambda, Arn ]}
      RoleArn: !GetAtt [TwitterS3UploadStepFunctionRole, Arn]
  TwitterS3UploadStepFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: [!GetAtt [S3UploadLambda, Arn], !GetAtt [TweetGetLambda, Arn]]
